//leetcode 142
//return the node from where cycle starting
1. find cycle length of LL
2. move s pointer from head to the length of length
3. then move both s,f pointer by one by one util f==s
4. return f or s

public class Solution {
    public ListNode detectCycle(ListNode head) {
          ListNode fast=head;
        ListNode slow=head;
         int length=0;
         while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            
            if(fast==slow){
                 length=lengthCycle(slow);
                break;
            }
         }
        if(length==0){
            return null;
        }
        ListNode f=head;
        ListNode s=head;
        while(length>0){
            s=s.next;
            length--;
        }
        while(f!=s){
            f=f.next;
            s=s.next;
        }
        
        return s;
    }
    
    public int lengthCycle(ListNode head){
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            
            if(fast==slow){
                ListNode temp=slow;
                int length=0;
                do{
                    temp=temp.next;
                    length++;
                }
                while(temp!=slow);
                return length;
            }
            
        }
        return 0;
    }
}
