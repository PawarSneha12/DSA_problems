public class DoublyLL {
    private Node  head;
    private int size;
    public DoublyLL(){
        this.size=0;
    }
  private  class Node{
      private  int value;
       private Node prev;
       private Node next;

       public Node(int val){
        this.value=val;
       }
       public Node(int val,Node prev,Node next){
        this.value=val;
        this.prev=prev;
        this.next=next;
       }
    }


public void insertFirst(int val){
    Node node =new Node(val);
    node.prev=null;
    node.next=head;
    if(head!=null){
        head.prev=node;
    }
    head=node;
    size++;
}

public void insertLast(int val){
    Node node=new Node(val);
    node.next=null;
    Node last=head;
    if(head==null){
       node.prev=null;
        head=node;
        return;
    }
    while(last.next!=null){
        last=last.next;
    }
    last.next=node;
    node.prev=last;
    size++;

}

public void insert(int after,int value){
    Node temp=get(after);
    if(temp==null){
        System.out.println("Doesn't Exits ");
        return ;
    }
    Node node =new Node(value);
    node.next=temp.next;
    temp.next=node;
    node.prev=temp;
    if(node.next!=null){
        node.next.prev=node;
    }
size++;

}


public Node get(int val){
    Node temp=head;
    while(temp!=null){
        if(temp.value==val){
            return temp;}
        temp=temp.next;
    }
    return null;
}

public void display(){
    Node temp=head;
    Node last=null;
    while(temp!=null){
        
        System.out.print(temp.value+"-> ");
        last=temp;
        temp=temp.next;
    }
    System.out.println("End");

    System.out.println(" Reverse Trave ");
    while(last!=null){
        System.out.print(last.value+"-> ");
        last=last.prev;
    }
    System.out.println("End");
    System.out.println("size is "+size); 
}

}
