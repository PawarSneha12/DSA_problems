//Recursion Solution

import java.util.* ;
import java.io.*; 
public class Solution {
    static int jump(int n,int[]h){
        if(n==0){
            return 0;
        }
        int l=jump(n-1,h)+Math.abs(h[n]-h[n-1]);
        int r=Integer.MAX_VALUE;
        if(n>1)
           r=jump(n-2,h)+Math.abs(h[n]-h[n-2]);
        
  return Math.min(l,r);
    }

    public static int frogJump(int n, int heights[]) {
       return jump(n-1,heights);
    }

}

////Memorization

import java.util.* ;
import java.io.*; 
public class Solution {
    static int jump(int n,int[]h,int[]dp){
        if(dp[n]!=-1){
            return dp[n];
        }
        if(n==0){
            return 0;
        }
        int l=jump(n-1,h,dp)+Math.abs(h[n]-h[n-1]);
        int r=Integer.MAX_VALUE;
        if(n>1)
           r=jump(n-2,h,dp)+Math.abs(h[n]-h[n-2]);
        
  return dp[n]= Math.min(l,r);
    }

    public static int frogJump(int n, int heights[]) {
        int[]dp=new int[n];
        Arrays.fill(dp,-1);
       return jump(n-1,heights,dp);
    }

}


///DP

    public static int frogJump(int n, int heights[]) {
        int[]dp=new int[n];
        Arrays.fill(dp,0);
      dp[0]=0;
        for(int i=1;i<n;i++){
            int f=dp[i-1]+Math.abs(heights[i]-heights[i-1]);
            int s=Integer.MAX_VALUE;
            if(i>1){
                s=dp[i-2]+Math.abs(heights[i]-heights[i-2]);
            }
            dp[i]=Math.min(f,s);
        }
       return dp[n-1];
    }

}
